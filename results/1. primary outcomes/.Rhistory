participant <- unique(all.df$email)
if(input$email %in% participant) {
output$enrolled <- renderText({
"This email has already been registered."
})
} else {
showToast(
session, input,
text = "Please wait, the system is performing randomisation.", type = "success"
)
output$enrolled <- renderText({
""
})
allocation <- sample(c("https://www.google.com", "https://www.starbucks.com"), 1, replace = F)
output$allocation <- renderText({paste(allocation)})
# here
data <- formData() %>% as.list() %>% data.frame()
data[,ncol(data)+1] <- Sys.Date()
data[,ncol(data)+1] <- paste(allocation)
sheet_append("https://docs.google.com/spreadsheets/d/1TUQGkdMkqkm3PP0jk8vBP2xKbzllGwg39b89C0Wh00w/edit#gid=0",
data)
output$random1 <- renderText({
paste0("You have been randomised to ", allocation, ".")
})
session$sendCustomMessage("mymessage", allocation)
}
} else {
showToast(
session, input,
text = "Some inputs are not valid.", type = "error"
)
}
}
)
}
runApp(shinyApp(ui, server), launch.browser = T)
ui = fluidPage(
theme = shinytheme("cerulean"),
tags$head(tags$script("Shiny.addCustomMessageHandler('mymessage', function(message) { window.location = message;});")),
verticalLayout(
titlePanel(div(column(width = 6, offset = 3, h3("CICERO (CommunICation of bEnefit Risk information: an Online randomised controlled trial)")),
column(width = 1, offset = 0, tags$img(src = "https://oxfordhealthbrc.nihr.ac.uk/wp-content/uploads/2020/04/Precision-Psychiatry-Lab-logo-small-3.png", width = "100"))),
windowTitle="CICERO RCT"
),
useShinyFeedback(),
useShinyToastify(),
mainPanel(
div(column(width = 6,
offset = 6,
style = "padding-bottom:10px",
h5("Please complete the fields below and click submit."),
"After clicking on 'Submit', you will be randomised to one of the two interventions. You will be automatically redirected to it. Should redirect not work, please copy and paste the URL.")
),
div(column(width = 6,
offset = 6,
style = "padding-bottom:10px",
"If you have any question, please contact us at", tags$a("edoardo.ostinelli@psych.ox.ac.uk", href = "edoardo.ostinelli@psych.ox.ac.uk"), ".")
),
div(column(width = 6,
offset = 6,
style = "padding-bottom:10px",
textInput("name", "Your name:", ""),
textInput("email", "Your email address:", ""),
checkboxInput("consent", "I have read the participant information sheet and I give consent to participate in this study.", FALSE),
actionButton("submit", "Submit"),
div(textOutput("enrolled"), style = "color:#9D4A46")
)
),
div(column(width = 6,
offset = 6,
style = "color:blue; background-color: #EBECF0",
textOutput("random1")
)
)
#,
#textInput("name", "Your name:", ""),
#textInput("email", "Your email address:", ""),
#checkboxInput("consent", "I have read the participant information sheet and I give consent to participate in this study.", FALSE),
#actionButton("submit", "Submit"),
#div(textOutput("enrolled"), style = "color:#9D4A46")
#),
#sidebarPanel(
#  div(textOutput("random1"), style = "color:blue")
)
)
)
server = function(input, output, session) {
session$onSessionEnded(stopApp)
# aggregate
formData <- reactive({
data <- sapply(c("name", "email", "consent"), function(x) input[[x]])
})
# validate
iv <- InputValidator$new()
iv$add_rule("email",
sv_email(message = "Please enter a valid email address.",
allow_na = F))
iv$add_rule("consent",
sv_equal(TRUE,
message_fmt = "Without consent it is not possible to proceed."))
iv$enable()
# submit
observeEvent(input$submit, {
if(iv$is_valid()) {
all.df <- read_sheet("https://docs.google.com/spreadsheets/d/1TUQGkdMkqkm3PP0jk8vBP2xKbzllGwg39b89C0Wh00w/edit#gid=0")
participant <- unique(all.df$email)
if(input$email %in% participant) {
output$enrolled <- renderText({
"This email has already been registered."
})
} else {
showToast(
session, input,
text = "Please wait, the system is performing randomisation.", type = "success"
)
output$enrolled <- renderText({
""
})
allocation <- sample(c("https://www.google.com", "https://www.starbucks.com"), 1, replace = F)
output$allocation <- renderText({paste(allocation)})
# here
data <- formData() %>% as.list() %>% data.frame()
data[,ncol(data)+1] <- Sys.Date()
data[,ncol(data)+1] <- paste(allocation)
sheet_append("https://docs.google.com/spreadsheets/d/1TUQGkdMkqkm3PP0jk8vBP2xKbzllGwg39b89C0Wh00w/edit#gid=0",
data)
output$random1 <- renderText({
paste0("You have been randomised to ", allocation, ".")
})
session$sendCustomMessage("mymessage", allocation)
}
} else {
showToast(
session, input,
text = "Some inputs are not valid.", type = "error"
)
}
}
)
}
runApp(shinyApp(ui, server), launch.browser = T)
ui = fluidPage(
theme = shinytheme("cerulean"),
tags$head(tags$script("Shiny.addCustomMessageHandler('mymessage', function(message) { window.location = message;});")),
verticalLayout(
titlePanel(div(column(width = 6, offset = 3, h3("CICERO (CommunICation of bEnefit Risk information: an Online randomised controlled trial)")),
column(width = 1, offset = 0, tags$img(src = "https://oxfordhealthbrc.nihr.ac.uk/wp-content/uploads/2020/04/Precision-Psychiatry-Lab-logo-small-3.png", width = "100"))),
windowTitle="CICERO RCT"
),
useShinyFeedback(),
useShinyToastify(),
mainPanel(
div(column(width = 6,
offset = 6,
style = "padding-bottom:10px",
h5("Please complete the fields below and click submit."),
"After clicking on 'Submit', you will be randomised to one of the two interventions. You will be automatically redirected to it. Should redirect not work, please copy and paste the URL.")
),
div(column(width = 6,
offset = 6,
style = "padding-bottom:10px",
"If you have any question, please contact us at", tags$a("edoardo.ostinelli@psych.ox.ac.uk", href = "edoardo.ostinelli@psych.ox.ac.uk"), ".")
),
div(column(width = 6,
offset = 6,
style = "padding-bottom:10px",
textInput("name", "Your name:", ""),
textInput("email", "Your email address:", ""),
checkboxInput("consent", "I have read the participant information sheet and I give consent to participate in this study.", FALSE),
actionButton("submit", "Submit"),
div(textOutput("enrolled"), style = "color:#9D4A46")
)
),
div(column(width = 6,
offset = 6,
style = "color:white; background-color: #002046",
textOutput("random1")
)
)
#,
#textInput("name", "Your name:", ""),
#textInput("email", "Your email address:", ""),
#checkboxInput("consent", "I have read the participant information sheet and I give consent to participate in this study.", FALSE),
#actionButton("submit", "Submit"),
#div(textOutput("enrolled"), style = "color:#9D4A46")
#),
#sidebarPanel(
#  div(textOutput("random1"), style = "color:blue")
)
)
)
server = function(input, output, session) {
session$onSessionEnded(stopApp)
# aggregate
formData <- reactive({
data <- sapply(c("name", "email", "consent"), function(x) input[[x]])
})
# validate
iv <- InputValidator$new()
iv$add_rule("email",
sv_email(message = "Please enter a valid email address.",
allow_na = F))
iv$add_rule("consent",
sv_equal(TRUE,
message_fmt = "Without consent it is not possible to proceed."))
iv$enable()
# submit
observeEvent(input$submit, {
if(iv$is_valid()) {
all.df <- read_sheet("https://docs.google.com/spreadsheets/d/1TUQGkdMkqkm3PP0jk8vBP2xKbzllGwg39b89C0Wh00w/edit#gid=0")
participant <- unique(all.df$email)
if(input$email %in% participant) {
output$enrolled <- renderText({
"This email has already been registered."
})
} else {
showToast(
session, input,
text = "Randomisation in progress. You will be shortly redirected to your intervention.", type = "success"
)
output$enrolled <- renderText({
""
})
allocation <- sample(c("https://www.google.com", "https://www.starbucks.com"), 1, replace = F)
output$allocation <- renderText({paste(allocation)})
# here
data <- formData() %>% as.list() %>% data.frame()
data[,ncol(data)+1] <- Sys.Date()
data[,ncol(data)+1] <- paste(allocation)
sheet_append("https://docs.google.com/spreadsheets/d/1TUQGkdMkqkm3PP0jk8vBP2xKbzllGwg39b89C0Wh00w/edit#gid=0",
data)
output$random1 <- renderText({
paste0("You have been randomised to ", allocation, ".")
})
session$sendCustomMessage("mymessage", allocation)
}
} else {
showToast(
session, input,
text = "Some inputs are not valid.", type = "error"
)
}
}
)
}
runApp(shinyApp(ui, server), launch.browser = T)
install.packages("rsconnect")
rsconnect
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='egostinelli', token='16CE78704440782A3A80046F4969BE21', secret='35B9dhQ2BBCjQ+0DvQwu5kbfnzS0/3faUPZPBYdb')
shiny::runApp('Desktop/Ongoing projects/CICERO/CICERO')
gs4_token()
options(gargle_oauth_cache = ".secrets")
# check the value of the option, if you like
gargle::gargle_oauth_cache()
# trigger auth on purpose to store a token in the specified cache
# a broswer will be opened
googlesheets4::sheets_auth()
# Set authentication token to be stored in a folder called `.secrets`
options(gargle_oauth_cache = ".secrets")
# Authenticate manually
gs4_auth()
# If successful, the previous step stores a token file.
# Check that a file has been created with:
list.files(".secrets/")
# Check that the non-interactive authentication works by first deauthorizing:
gs4_deauth()
# Authenticate using token. If no browser opens, the authentication works.
gs4_auth(cache = ".secrets", email = "eg.ostinelli@gmail.com")
runApp('Desktop/Ongoing projects/CICERO/CICERO')
mu1 = 23.13
mu2 = 14.59
mu = mu1-mu2
sd1 = 20.34
sd2 = 15.04
sd = sqrt((((sd1*sd1)+(sd2*sd2))/2))
d <- mu/sd
d
pwr::pwr.t.test(d = d,
power = 0.9,
sig.level = 0.05)
mu1 = 23.13
mu2 = 14.59
mu = mu1-mu2
sd1 = 20.34
sd2 = 15.04
sd = sqrt((((sd1*sd1)+(sd2*sd2))/2))
d <- mu/sd
d
pwr::pwr.anova.test(k = 3,
f = d,
power = 0.9,
sig.level = 0.05)
pwr::pwr.anova.test(k = 3,
f = 0.1,
power = 0.9,
sig.level = 0.05)
pwr::pwr.anova.test(k = 3,
f = 0.25,
power = 0.9,
sig.level = 0.05)
pwr::pwr.anova.test(k = 3,
f = 0.4,
power = 0.9,
sig.level = 0.05)
pwr::pwr.anova.test(k = 3,
f = 0.25,
power = 0.9,
sig.level = 0.05)
pwr::pwr.anova.test(k = 3,
f = 0.25,
power = 0.9,
sig.level = 0.05)
sd.between <- sd(mu1, mu1, mu2)
sd.within <-sqrt((((sd1*sd1)+(sd1*sd1)+(sd2*sd2))/3))
mu1 = 23.13
mu2 = 14.59
mu = mu1-mu2
sd1 = 20.34
sd2 = 15.04
sd = sqrt((((sd1*sd1)+(sd2*sd2))/2))
d <- mu/sd
d
sd.between <- sd(mu1, mu1, mu2)
mu2
sd.between <- sd(c(mu1, mu1, mu2))
sd.between
sd.within <-sqrt((((sd1*sd1)+(sd1*sd1)+(sd2*sd2))/3))
sd.between/sd.within
pwr::pwr.anova.test(k = 3,
f = sd.between/sd.within,
power = 0.9,
sig.level = 0.05)
sd.between <- sd(c(mu1, mu2, mu2))
sd.within <-sqrt((((sd1*sd1)+(sd2*sd2)+(sd2*sd2))/3))
sd.between/sd.within
pwr::pwr.anova.test(k = 3,
f = sd.between/sd.within,
power = 0.9,
sig.level = 0.05)
pwr::pwr.anova.test(k = 3,
f = sd.between/sd.within,
power = 0.9,
sig.level = 0.05/3)
0.05/3
pwr::pwr.anova.test(k = 3,
f = sd.between/sd.within,
power = 0.9,
sig.level = 0.01)
pwr::pwr.anova.test(k = 3,
f = sd.between/sd.within,
power = 0.9,
sig.level = 0.05/3)
76/349
65*3
195*(76/349)
round(195*(76/349),0)
195+round(195*(76/349),0)
65+round(65*(76/349),0)
79*3
update.packages(ask = FALSE, checkBuilt = TRUE)
rm(list=ls())
library(meta)
library(netmeta)
library(readxl)
library(dmetar)
library(nmajags)
library(ggplot2)
# explore ----
rm(list = setdiff(ls(), lsf.str()))
home = "~/Dropbox/NMA_migraine_analyses"
setwd(home)
## database ----
db <- readxl::read_excel("dataset/NMA_Extraction_sheet_20230523.xlsx")
db[db=="*"] = NA
## book ----
book <- readxl::read_excel("dataset/NMA_Outcomes_20230523.xlsx")
colnames(book) <- c('outcome', 'direction', 'polite.name')
#book$outcome <- tolower(book$outcome)
book$direction <- tolower(book$direction)
db2 <- readRDS('results/rds/db2.rds')
AEd2 <- readRDS('results/rds/AEd2.rds')
# prepare outcomes ----
primary.outcome <- c('pf2h_first_attack_r',
'sustained_pf_2_24h_r')
secondary.outcome <- c('headache_relief_2h_r',
'headache_relapse_2_48h_r',
'headache_relapse_2_24h_r',
'rescue_medication_2_24h_r',
'SAE_one_or_more_type_r')
sae_outcome <- c('Abdominal pain (SAE)',
'Allergic reaction (SAE)',
'Chest pain or discomfort (SAE)',
'Dyspepsia (SAE)',
'Dizziness (SAE)',
'Major cardiovascular event (SAE)',
'Nausea (SAE)',
'Serotonergic syndrome (SAE)',
'Vomiting (SAE)')
ae_outcome <- unique(AEd2$DEFINED_AE_OUTCOMES)[!is.na(unique(AEd2$DEFINED_AE_OUTCOMES))]
ae_outcome <- ae_outcome[!(ae_outcome %in% sae_outcome)]
# analyses ----
## set wd ----
# rm(list = setdiff(ls(), lsf.str()))
home = "~/Dropbox/NMA_migraine_analyses/results"
setwd(home)
outcome.d.r <- primary.outcome[2]
outcome.d.r
direction = book$direction[book$outcome==outcome.d.r]
polite.name = book$polite.name[book$outcome==outcome.d.r]
home = "~/Dropbox/NMA_migraine_analyses/results"
setwd(paste0(home, ifelse(outcome.d.r %in% primary.outcome,
'/primary',
ifelse(outcome.d.r %in% secondary.outcome,
'/secondary',
ifelse(outcome.d.r %in% sae_outcome,
'/SAE',
'/AE')
)
)
)
)
getwd()
NMA.IV2 <- readRDS(paste0(book$polite.name[book$outcome==outcome.d.r], '/individual/IV/', outcome.d.r, ' - NMA.rds'))
data2 <- readRDS(paste0(book$polite.name[book$outcome==outcome.d.r], '/individual/IV/', outcome.d.r, ' - data2.rds'))
### netconnection ----
# pw.d2 <- pairwise(treat = intervention, n, event = r, data = data2, studlab = id, sm = 'OR', allstudies = T)
# netconnection(treat1, treat2, studlab, data = pw.d2, subset = NULL)
pw.d2 <- pairwise(treat = intervention, n, event = r, data = data2, studlab = id, sm = 'OR')
View(pw.d2)
View(data2)
NMA.IV2 <- readRDS(paste0(book$polite.name[book$outcome==outcome.d.r], '/individual/IV/', outcome.d.r, ' - NMA.rds'))
#### forest - IV ----
comparators = c('placebo',
'paracetamol')
for (i in comparators) {
if (i %in% NMA.IV2$trts) {
for (method in c('fixed', 'random')) {
png(file = paste0(book$polite.name[book$outcome==outcome.d.r],
'/individual/IV/',
book$polite.name[book$outcome==outcome.d.r],
' - IV2 ',
method,
' - vs ',
i,
' - forest.png'),
width = 11, height = 6, units = 'in', res = 300)
forest(NMA.IV2,
ref = paste0(i),
pooled = method,
digits = 2,
smlab = paste0('vs ', i),
leftlabs = polite.name,
drop = FALSE,
sortvar = -TE,
col.square = if (outcome.d.r %in% primary.outcome) {'#76D7C4'} else {'#CFB5DE'},
label.right = ifelse(direction=='positive', 'Favours drug', paste0('Favours ', i)),
label.left = ifelse(direction=='positive', paste0('Favours ', i), 'Favours drug'))
dev.off()
}
} else {
warning(paste0(i, ' not available as reference choice.'))
}
}
#### forest - IV - alphabetical order ----
png(file = paste0(book$polite.name[book$outcome==outcome.d.r],
'/individual/IV/',
book$polite.name[book$outcome==outcome.d.r],
' - IV2 random - forest - abc.png'),
width = 11, height = 6, units = 'in', res = 300)
forest(NMA.IV2,
ref = 'placebo',
pooled = 'random',
digits = 2,
smlab = 'vs placebo',
leftlabs = polite.name,
drop = FALSE,
sortvar = NMA.IV2[['trts']],
col.square = if (outcome.d.r %in% primary.outcome) {'#76D7C4'} else {'#CFB5DE'},
label.right = ifelse(direction=='positive', 'Favours drug', 'Favours placebo'),
label.left = ifelse(direction=='positive', 'Favours placebo', 'Favours drug'))
dev.off()
NMA.IV2.split <- readRDS(paste0(book$polite.name[book$outcome==outcome.d.r], '/individual/IV/', outcome.d.r, ' - netsplit.rds'))
for (method in c('fixed', 'random')) {
png(file = paste0(book$polite.name[book$outcome==outcome.d.r],
'/individual/IV/',
book$polite.name[book$outcome==outcome.d.r],
' - IV2 ',
method,
' - netsplit.png'),
width = 10, height = 124, units = 'in', res = 300)
forest(NMA.IV2.split,
prediction = TRUE,
pooled = method,
show = 'all')
dev.off()
}
for (method in c('fixed', 'random')) {
png(file = paste0(book$polite.name[book$outcome==outcome.d.r],
'/individual/IV/',
book$polite.name[book$outcome==outcome.d.r],
' - IV2 ',
method,
' - netsplit.png'),
width = 10, height = 200, units = 'in', res = 300)
forest(NMA.IV2.split,
prediction = TRUE,
pooled = method,
show = 'all')
dev.off()
}
